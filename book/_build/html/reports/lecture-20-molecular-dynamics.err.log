Traceback (most recent call last):
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# Physical constants
m = 0.04593          # Mass of golf ball in kg
r = 0.02134          # Radius in meters (diameter is 42.67 mm)
A = np.pi * r**2     # Cross-sectional area in m^2
C_d = 0.25           # Drag coefficient for a sphere
C_l = 0.15           # Lift coefficient
rho = 1.225          # Air density in kg/m^3
g = 9.81             # Acceleration due to gravity in m/s^2

# Initial conditions
v0 = 77.65                   # Initial speed in m/s
theta = np.deg2rad(10.22)    # Launch angle in radians
x0 = 0.0                     # Initial horizontal position
y0 = 0.0                     # Initial vertical position
v0x = v0 * np.cos(theta)     # Initial horizontal velocity
v0y = v0 * np.sin(theta)     # Initial vertical velocity

# Define the ODE system
def golf_ball_ode(t, y):
    x, y_pos, vx, vy = y
    v = np.hypot(vx, vy)
    # Drag force
    F_d = 0.5 * rho * v**2 * C_d * A
    F_dx = -F_d * (vx / v)
    F_dy = -F_d * (vy / v)
    # Lift force
    F_l = 0.5 * rho * v**2 * C_l * A
    F_lx = F_l * (-vy / v)
    F_ly = F_l * (vx / v)
    # Net forces
    Fx = F_dx + F_lx
    Fy = F_dy + F_ly - m * g
    # Accelerations
    ax = Fx / m
    ay = Fy / m
    return [vx, vy, ax, ay]

# Event function to stop integration when the ball hits the ground
def hit_ground(t, y):
    return y[1]  # Vertical position

hit_ground.terminal = True    # Stop the integration
hit_ground.direction = -1     # Only detect zeros when the function is decreasing

# Time span for the simulation
t_span = (0, 10)                   # Simulate for 10 seconds
t_eval = np.linspace(0, 10, 1000)  # Time points where solution is computed

# Initial state vector
y_initial = [x0, y0, v0x, v0y]

# Solve the ODE
solution = solve_ivp(
    golf_ball_ode,
    t_span,
    y_initial,
    t_eval=t_eval,
    events=hit_ground,
    rtol=1e-8,
    atol=1e-10
)

# Extract the solution
x = solution.y[0]
y_pos = solution.y[1]

# Plotting the trajectory
plt.figure(figsize=(10, 6))
plt.plot(x, y_pos, label='Trajectory with Drag and Lift')
plt.xlabel('Horizontal Distance (m)')
plt.ylabel('Vertical Distance (m)')
plt.title('Trajectory of a Golf Ball')
plt.legend()
plt.grid(True)
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mImportError[0m                               Traceback (most recent call last)
Cell [0;32mIn[2], line 2[0m
[1;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m----> 2[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mintegrate[39;00m [38;5;28;01mimport[39;00m solve_ivp
[1;32m      3[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m      5[0m [38;5;66;03m# Physical constants[39;00m

File [0;32m~/.local/lib/python3.9/site-packages/scipy/integrate/__init__.py:91[0m
[1;32m      1[0m [38;5;124;03m"""[39;00m
[1;32m      2[0m [38;5;124;03m=============================================[39;00m
[1;32m      3[0m [38;5;124;03mIntegration and ODEs (:mod:`scipy.integrate`)[39;00m
[0;32m   (...)[0m
[1;32m     87[0m [38;5;124;03m   solve_bvp     -- Solve a boundary value problem for a system of ODEs.[39;00m
[1;32m     88[0m [38;5;124;03m"""[39;00m  [38;5;66;03m# noqa: E501[39;00m
[0;32m---> 91[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m_quadrature[39;00m [38;5;28;01mimport[39;00m [38;5;241m*[39m
[1;32m     92[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m_odepack_py[39;00m [38;5;28;01mimport[39;00m [38;5;241m*[39m
[1;32m     93[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m_quadpack_py[39;00m [38;5;28;01mimport[39;00m [38;5;241m*[39m

File [0;32m~/.local/lib/python3.9/site-packages/scipy/integrate/_quadrature.py:12[0m
[1;32m      9[0m [38;5;66;03m# trapezoid is a public function for scipy.integrate,[39;00m
[1;32m     10[0m [38;5;66;03m# even though it's actually a NumPy function.[39;00m
[1;32m     11[0m [38;5;28;01mfrom[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mimport[39;00m trapz [38;5;28;01mas[39;00m trapezoid
[0;32m---> 12[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mspecial[39;00m [38;5;28;01mimport[39;00m roots_legendre
[1;32m     13[0m [38;5;28;01mfrom[39;00m [38;5;21;01mscipy[39;00m[38;5;21;01m.[39;00m[38;5;21;01mspecial[39;00m [38;5;28;01mimport[39;00m gammaln
[1;32m     15[0m __all__ [38;5;241m=[39m [[38;5;124m'[39m[38;5;124mfixed_quad[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mquadrature[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mromberg[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mromb[39m[38;5;124m'[39m,
[1;32m     16[0m            [38;5;124m'[39m[38;5;124mtrapezoid[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mtrapz[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124msimps[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124msimpson[39m[38;5;124m'[39m,
[1;32m     17[0m            [38;5;124m'[39m[38;5;124mcumulative_trapezoid[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mcumtrapz[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mnewton_cotes[39m[38;5;124m'[39m,
[1;32m     18[0m            [38;5;124m'[39m[38;5;124mAccuracyWarning[39m[38;5;124m'[39m]

File [0;32m~/.local/lib/python3.9/site-packages/scipy/special/__init__.py:649[0m
[1;32m      1[0m [38;5;124;03m"""[39;00m
[1;32m      2[0m [38;5;124;03m========================================[39;00m
[1;32m      3[0m [38;5;124;03mSpecial functions (:mod:`scipy.special`)[39;00m
[0;32m   (...)[0m
[1;32m    644[0m 
[1;32m    645[0m [38;5;124;03m"""[39;00m
[1;32m    647[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m_sf_error[39;00m [38;5;28;01mimport[39;00m SpecialFunctionWarning, SpecialFunctionError
[0;32m--> 649[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m _ufuncs
[1;32m    650[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m_ufuncs[39;00m [38;5;28;01mimport[39;00m [38;5;241m*[39m
[1;32m    652[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m [38;5;28;01mimport[39;00m _basic

[0;31mImportError[0m: dlopen(/Users/robertwexler/.local/lib/python3.9/site-packages/scipy/special/_ufuncs.cpython-39-darwin.so, 0x0002): symbol not found in flat namespace '_npy_asinh'

