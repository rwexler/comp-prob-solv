Traceback (most recent call last):
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/robertwexler/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
from scipy.optimize import minimize

# Define system parameters
N_a = 16
mus = np.linspace(-2, 0, 10)
beta = 10.0
epsilon = -1.0
epsilon_int = 0.1

# Perform grand canonical Monte Carlo simulation for different chemical potentials
coverages = [np.mean(grand_canonical_mc_mean_field_sorbent(N_a, mu, beta, epsilon, epsilon_int)) for mu in mus]

# Calculate the numerical solution using scipy.optimize.minimize
def objective(coverage, mu, N_a, beta, epsilon, epsilon_int):
    value = np.log(coverage / (1 - coverage)) + beta * epsilon + beta * coverage * z * epsilon_int - beta * mu
    return np.abs(value)

coverages_numerical = []
for mu in mus:
    result = minimize(objective, 0.5, args=(mu, N_a, beta, epsilon, epsilon_int))
    coverages_numerical.append(result.x[0])

# Plot the adsorption isotherm
plt.plot(mus, coverages, 'o-', label='Simulation')
plt.plot(mus, coverages_numerical, '--', label='Numerical')
plt.xlabel(r'Chemical potential $\mu$')
plt.ylabel(r'Coverage $\theta$')
plt.legend()
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[8], line 20[0m
[1;32m     18[0m coverages_numerical [38;5;241m=[39m []
[1;32m     19[0m [38;5;28;01mfor[39;00m mu [38;5;129;01min[39;00m mus:
[0;32m---> 20[0m     result [38;5;241m=[39m [43mminimize[49m[43m([49m[43mobjective[49m[43m,[49m[43m [49m[38;5;241;43m0.5[39;49m[43m,[49m[43m [49m[43margs[49m[38;5;241;43m=[39;49m[43m([49m[43mmu[49m[43m,[49m[43m [49m[43mN_a[49m[43m,[49m[43m [49m[43mbeta[49m[43m,[49m[43m [49m[43mepsilon[49m[43m,[49m[43m [49m[43mepsilon_int[49m[43m)[49m[43m)[49m
[1;32m     21[0m     coverages_numerical[38;5;241m.[39mappend(result[38;5;241m.[39mx[[38;5;241m0[39m])
[1;32m     23[0m [38;5;66;03m# Plot the adsorption isotherm[39;00m

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_minimize.py:726[0m, in [0;36mminimize[0;34m(fun, x0, args, method, jac, hess, hessp, bounds, constraints, tol, callback, options)[0m
[1;32m    724[0m     res [38;5;241m=[39m _minimize_cg(fun, x0, args, jac, callback, [38;5;241m*[39m[38;5;241m*[39moptions)
[1;32m    725[0m [38;5;28;01melif[39;00m meth [38;5;241m==[39m [38;5;124m'[39m[38;5;124mbfgs[39m[38;5;124m'[39m:
[0;32m--> 726[0m     res [38;5;241m=[39m [43m_minimize_bfgs[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mjac[49m[43m,[49m[43m [49m[43mcallback[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43moptions[49m[43m)[49m
[1;32m    727[0m [38;5;28;01melif[39;00m meth [38;5;241m==[39m [38;5;124m'[39m[38;5;124mnewton-cg[39m[38;5;124m'[39m:
[1;32m    728[0m     res [38;5;241m=[39m _minimize_newtoncg(fun, x0, args, jac, hess, hessp, callback,
[1;32m    729[0m                              [38;5;241m*[39m[38;5;241m*[39moptions)

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_optimize.py:1371[0m, in [0;36m_minimize_bfgs[0;34m(fun, x0, args, jac, callback, gtol, norm, eps, maxiter, disp, return_all, finite_diff_rel_step, xrtol, c1, c2, hess_inv0, **unknown_options)[0m
[1;32m   1368[0m [38;5;28;01mif[39;00m maxiter [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[1;32m   1369[0m     maxiter [38;5;241m=[39m [38;5;28mlen[39m(x0) [38;5;241m*[39m [38;5;241m200[39m
[0;32m-> 1371[0m sf [38;5;241m=[39m [43m_prepare_scalar_function[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43mjac[49m[43m,[49m[43m [49m[43margs[49m[38;5;241;43m=[39;49m[43margs[49m[43m,[49m[43m [49m[43mepsilon[49m[38;5;241;43m=[39;49m[43meps[49m[43m,[49m
[1;32m   1372[0m [43m                              [49m[43mfinite_diff_rel_step[49m[38;5;241;43m=[39;49m[43mfinite_diff_rel_step[49m[43m)[49m
[1;32m   1374[0m f [38;5;241m=[39m sf[38;5;241m.[39mfun
[1;32m   1375[0m myfprime [38;5;241m=[39m sf[38;5;241m.[39mgrad

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_optimize.py:288[0m, in [0;36m_prepare_scalar_function[0;34m(fun, x0, jac, args, bounds, epsilon, finite_diff_rel_step, hess)[0m
[1;32m    284[0m     bounds [38;5;241m=[39m ([38;5;241m-[39mnp[38;5;241m.[39minf, np[38;5;241m.[39minf)
[1;32m    286[0m [38;5;66;03m# ScalarFunction caches. Reuse of fun(x) during grad[39;00m
[1;32m    287[0m [38;5;66;03m# calculation reduces overall function evaluations.[39;00m
[0;32m--> 288[0m sf [38;5;241m=[39m [43mScalarFunction[49m[43m([49m[43mfun[49m[43m,[49m[43m [49m[43mx0[49m[43m,[49m[43m [49m[43margs[49m[43m,[49m[43m [49m[43mgrad[49m[43m,[49m[43m [49m[43mhess[49m[43m,[49m
[1;32m    289[0m [43m                    [49m[43mfinite_diff_rel_step[49m[43m,[49m[43m [49m[43mbounds[49m[43m,[49m[43m [49m[43mepsilon[49m[38;5;241;43m=[39;49m[43mepsilon[49m[43m)[49m
[1;32m    291[0m [38;5;28;01mreturn[39;00m sf

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_differentiable_functions.py:222[0m, in [0;36mScalarFunction.__init__[0;34m(self, fun, x0, args, grad, hess, finite_diff_rel_step, finite_diff_bounds, epsilon)[0m
[1;32m    219[0m     finite_diff_options[[38;5;124m"[39m[38;5;124mas_linear_operator[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m    221[0m [38;5;66;03m# Initial function evaluation[39;00m
[0;32m--> 222[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_update_fun[49m[43m([49m[43m)[49m
[1;32m    224[0m [38;5;66;03m# Initial gradient evaluation[39;00m
[1;32m    225[0m [38;5;28mself[39m[38;5;241m.[39m_wrapped_grad, [38;5;28mself[39m[38;5;241m.[39m_ngev [38;5;241m=[39m _wrapper_grad(
[1;32m    226[0m     grad,
[1;32m    227[0m     fun[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_wrapped_fun,
[1;32m    228[0m     args[38;5;241m=[39margs,
[1;32m    229[0m     finite_diff_options[38;5;241m=[39mfinite_diff_options
[1;32m    230[0m )

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_differentiable_functions.py:294[0m, in [0;36mScalarFunction._update_fun[0;34m(self)[0m
[1;32m    292[0m [38;5;28;01mdef[39;00m [38;5;21m_update_fun[39m([38;5;28mself[39m):
[1;32m    293[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39mf_updated:
[0;32m--> 294[0m         fx [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_wrapped_fun[49m[43m([49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mx[49m[43m)[49m
[1;32m    295[0m         [38;5;28;01mif[39;00m fx [38;5;241m<[39m [38;5;28mself[39m[38;5;241m.[39m_lowest_f:
[1;32m    296[0m             [38;5;28mself[39m[38;5;241m.[39m_lowest_x [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mx

File [0;32m~/miniconda3/envs/comp-prob-solv/lib/python3.12/site-packages/scipy/optimize/_differentiable_functions.py:20[0m, in [0;36m_wrapper_fun.<locals>.wrapped[0;34m(x)[0m
[1;32m     16[0m ncalls[[38;5;241m0[39m] [38;5;241m+[39m[38;5;241m=[39m [38;5;241m1[39m
[1;32m     17[0m [38;5;66;03m# Send a copy because the user may overwrite it.[39;00m
[1;32m     18[0m [38;5;66;03m# Overwriting results in undefined behaviour because[39;00m
[1;32m     19[0m [38;5;66;03m# fun(self.x) will change self.x, with the two no longer linked.[39;00m
[0;32m---> 20[0m fx [38;5;241m=[39m [43mfun[49m[43m([49m[43mnp[49m[38;5;241;43m.[39;49m[43mcopy[49m[43m([49m[43mx[49m[43m)[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m)[49m
[1;32m     21[0m [38;5;66;03m# Make sure the function returns a true scalar[39;00m
[1;32m     22[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m np[38;5;241m.[39misscalar(fx):

Cell [0;32mIn[8], line 15[0m, in [0;36mobjective[0;34m(coverage, mu, N_a, beta, epsilon, epsilon_int)[0m
[1;32m     14[0m [38;5;28;01mdef[39;00m [38;5;21mobjective[39m(coverage, mu, N_a, beta, epsilon, epsilon_int):
[0;32m---> 15[0m     value [38;5;241m=[39m np[38;5;241m.[39mlog(coverage [38;5;241m/[39m ([38;5;241m1[39m [38;5;241m-[39m coverage)) [38;5;241m+[39m beta [38;5;241m*[39m epsilon [38;5;241m+[39m beta [38;5;241m*[39m coverage [38;5;241m*[39m [43mz[49m [38;5;241m*[39m epsilon_int [38;5;241m-[39m beta [38;5;241m*[39m mu
[1;32m     16[0m     [38;5;28;01mreturn[39;00m np[38;5;241m.[39mabs(value)

[0;31mNameError[0m: name 'z' is not defined

